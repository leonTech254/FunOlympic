@page "/event/{EventId}/details"
@inject EventService _eventService;
@inject NavigationManager Navigation
@inject EventService _eventService;
@inject CommentService _commentService;

<header>
    <link rel="stylesheet" href="css\eventDetails.css">
</header>
<div class="event-container">
    <div class="event-details">
        <h2>@eventModel.EventName</h2>
        <p>@eventModel.EventDescription</p>
        <p>Event Date: @eventModel.EventDate</p>
        @* <img src="@eventModel.EventImageUrl" alt="Event Image" /> *@
        <video controls  class="event-video" poster="images/funOlympics.jpeg">
            <!-- Placeholder video source -->
            <source src="http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
        <div>
            <div class="input_container">
           <input type="text" id="EventForm" placeholder="Add Comment...." @bind="user_comment">
           <button @onclick="()=>AddComment(eventModel)">Add Comment</button>
         </div>
         <div class="allComments">
            <ul>
                @foreach(var comment in commentsList)
                {
                <li>
                    @* <img src="images/" alt=""> *@
                    <span class="name">@comment.username</span>
                    <span >@comment.Comment</span>
                    <div class="comment_time">@comment.timeCommented</div>

                </li>
                }
             
            </ul>
            
         </div>
        </div>
    </div>
    <div class="other-events">
        <h2>Other Events</h2>
        @foreach (var evt in OtherEvents)
        {
            <p><a href="@($"event/{evt.Id}/details")">@evt.EventName</a></p>
        }
    </div>
</div>

@code {
    [Parameter]
    public string EventId { get; set; }

    public EventModel eventModel;
    public List<EventModel> OtherEvents = new List<EventModel>();
    public string user_comment; 
    public List<CommentModel> commentsList;
        

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(EventId);
        eventModel = await _eventService.getEventDetails(id);
       commentsList= await _commentService.GetComments(id);

        // Simulated list of other events (replace with actual data)
        OtherEvents = await _eventService.getAllEvents();
        OtherEvents.RemoveAll(evt => evt.Id == id); 
        @* Timer timer = new Timer(changeState, null, TimeSpan.Zero, TimeSpan.FromSeconds(1)); *@
    Timer timer = new Timer(async _ => await ChangeState(), null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }

  public async Task ChangeState()
{
    StateHasChanged();
    commentsList = await _commentService.GetComments(int.Parse(EventId));
    Console.WriteLine("hello leon");
}



    public async Task AddComment(EventModel eventModel)
    {
        await _commentService.AddComment(eventModel.Id,user_comment); 
        user_comment="";
        await ChangeState();
    }

   
}
